#!/usr/bin/python
import sys,os
sys.path.append('/opt/galamost4/lib') # the path where the GALAMOST program is installed
import galamost
import numpy as np
from optparse import OptionParser
 
global _options
parser = OptionParser()
parser.add_option('--gpu', dest='gpu',help='GPU on which to execute')
(_options, args) = parser.parse_args()
 
filename = 'polymer.xml' # initial configuration file
randomnum = 33
build_method = galamost.XmlReader(filename)
perform_config = galamost.PerformConfig(_options.gpu) # assign GPU by index
all_info = galamost.AllInfo(build_method, perform_config) # build system information
 
dt = 0.06
app = galamost.Application(all_info, dt)  # build up an application with system information and integration time-step

neighbor_list = galamost.NeighborList(all_info, 1.0 ,0.05)#(,rcut,rbuffer)
dpd = galamost.DpdForce(all_info, neighbor_list, 1.0, 1.0 ,randomnum)#(,,rcut, the seed for RNG)
dpd.setParams('D', 'D', 25.0, 3.0)#(type,type,alpha,sigma)
dpd.setParams('E', 'D', 25.0, 3.0)#(type,type,alpha,sigma)
dpd.setParams('E', 'E', 25.0, 3.0)#(type,type,alpha,sigma)
dpd.setDPDVV();
app.add(dpd)

bgroup = galamost.ParticleSet(all_info, 'D')
rigidnve = galamost.NveRigid(all_info, bgroup)
app.add(rigidnve)


group = galamost.ParticleSet(all_info,['E'])
thermo = galamost.Nve(all_info,group)
app.add(thermo)

groupall = galamost.ParticleSet(all_info,'all')
comp_info = galamost.ComputeInfo(all_info, groupall)

dinfo = galamost.DumpInfo(all_info, comp_info, 'data.log')
dinfo.setPeriod(1000)
app.add(dinfo)

group = galamost.ParticleSet(all_info, "D") # a collection of particles

group1 = galamost.ParticleSet(all_info, 'all') # a collection of all

sort_method = galamost.Sort(all_info)  # memory sorting to improve performance 
sort_method.setPeriod(1)
app.add(sort_method) 


xml1 = galamost.XmlDump(all_info,group1, 'polymers') # output the configuration files in xml format
xml1.setPeriod(10000)# (period)
xml1.setOutputBond(True)
xml1.setOutputBody(True)
xml1.setOutputOrientation(True)
xml1.setOutputRotation(True)
app.add(xml1)

xml1 = galamost.DcdDump(all_info,group1, 'polymers',True) # output the configuration files in xml format
xml1.setPeriod(10000)# (period)
xml1.unpbc(True)
app.add(xml1)

npcoord=np.loadtxt("npnumber.txt").astype('int').tolist()
group = galamost.ParticleSet(all_info, npcoord)

dcd = galamost.DcdDump(all_info, group,'particles',True)
dcd.unpbc(True)
dcd.setPeriod(10000)
app.add(dcd)


binary = galamost.BinaryDump(all_info, 'restart')
binary.setOutputForRestart()
binary.setPeriod(5000000)
app.add(binary)

app.run(1000001)
neighbor_list.printStats() # output the information about neighbor_list 

#os.system("python xyz2xmldata.py")
os.system("python3m Rgcalcnew.py")

